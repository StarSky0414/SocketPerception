package com.tts.starsky.apperceive.db.bao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.apperceive.db.bean.MessageBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_BEAN".
*/
public class MessageBeanDao extends AbstractDao<MessageBean, Long> {

    public static final String TABLENAME = "MESSAGE_BEAN";

    /**
     * Properties of entity MessageBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MessageId = new Property(0, Long.class, "messageId", true, "_id");
        public final static Property SendUserId = new Property(1, String.class, "sendUserId", false, "SEND_USER_ID");
        public final static Property ReceiveUserId = new Property(2, String.class, "receiveUserId", false, "RECEIVE_USER_ID");
        public final static Property OtherUserId = new Property(3, String.class, "otherUserId", false, "OTHER_USER_ID");
        public final static Property MessageContext = new Property(4, String.class, "MessageContext", false, "MESSAGE_CONTEXT");
        public final static Property Time = new Property(5, String.class, "Time", false, "TIME");
        public final static Property VoiceTime = new Property(6, String.class, "voiceTime", false, "VOICE_TIME");
        public final static Property Readed = new Property(7, int.class, "readed", false, "READED");
    }


    public MessageBeanDao(DaoConfig config) {
        super(config);
    }
    
    public MessageBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: messageId
                "\"SEND_USER_ID\" TEXT," + // 1: sendUserId
                "\"RECEIVE_USER_ID\" TEXT," + // 2: receiveUserId
                "\"OTHER_USER_ID\" TEXT," + // 3: otherUserId
                "\"MESSAGE_CONTEXT\" TEXT," + // 4: MessageContext
                "\"TIME\" TEXT," + // 5: Time
                "\"VOICE_TIME\" TEXT," + // 6: voiceTime
                "\"READED\" INTEGER NOT NULL );"); // 7: readed
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(1, messageId);
        }
 
        String sendUserId = entity.getSendUserId();
        if (sendUserId != null) {
            stmt.bindString(2, sendUserId);
        }
 
        String receiveUserId = entity.getReceiveUserId();
        if (receiveUserId != null) {
            stmt.bindString(3, receiveUserId);
        }
 
        String otherUserId = entity.getOtherUserId();
        if (otherUserId != null) {
            stmt.bindString(4, otherUserId);
        }
 
        String MessageContext = entity.getMessageContext();
        if (MessageContext != null) {
            stmt.bindString(5, MessageContext);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(6, Time);
        }
 
        String voiceTime = entity.getVoiceTime();
        if (voiceTime != null) {
            stmt.bindString(7, voiceTime);
        }
        stmt.bindLong(8, entity.getReaded());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageBean entity) {
        stmt.clearBindings();
 
        Long messageId = entity.getMessageId();
        if (messageId != null) {
            stmt.bindLong(1, messageId);
        }
 
        String sendUserId = entity.getSendUserId();
        if (sendUserId != null) {
            stmt.bindString(2, sendUserId);
        }
 
        String receiveUserId = entity.getReceiveUserId();
        if (receiveUserId != null) {
            stmt.bindString(3, receiveUserId);
        }
 
        String otherUserId = entity.getOtherUserId();
        if (otherUserId != null) {
            stmt.bindString(4, otherUserId);
        }
 
        String MessageContext = entity.getMessageContext();
        if (MessageContext != null) {
            stmt.bindString(5, MessageContext);
        }
 
        String Time = entity.getTime();
        if (Time != null) {
            stmt.bindString(6, Time);
        }
 
        String voiceTime = entity.getVoiceTime();
        if (voiceTime != null) {
            stmt.bindString(7, voiceTime);
        }
        stmt.bindLong(8, entity.getReaded());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageBean readEntity(Cursor cursor, int offset) {
        MessageBean entity = new MessageBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // messageId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sendUserId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiveUserId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // otherUserId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // MessageContext
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // Time
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // voiceTime
            cursor.getInt(offset + 7) // readed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageBean entity, int offset) {
        entity.setMessageId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendUserId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiveUserId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOtherUserId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMessageContext(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setVoiceTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReaded(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageBean entity, long rowId) {
        entity.setMessageId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageBean entity) {
        if(entity != null) {
            return entity.getMessageId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageBean entity) {
        return entity.getMessageId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
