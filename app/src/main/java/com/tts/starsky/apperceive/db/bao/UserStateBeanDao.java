package com.tts.starsky.apperceive.db.bao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tts.starsky.apperceive.db.bean.UserStateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_STATE_BEAN".
*/
public class UserStateBeanDao extends AbstractDao<UserStateBean, String> {

    public static final String TABLENAME = "USER_STATE_BEAN";

    /**
     * Properties of entity UserStateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserId = new Property(0, String.class, "userId", true, "USER_ID");
        public final static Property UserNickName = new Property(1, String.class, "userNickName", false, "USER_NICK_NAME");
        public final static Property UserSex = new Property(2, String.class, "userSex", false, "USER_SEX");
        public final static Property UserSession = new Property(3, String.class, "userSession", false, "USER_SESSION");
        public final static Property UserLastMessageId = new Property(4, String.class, "userLastMessageId", false, "USER_LAST_MESSAGE_ID");
    }


    public UserStateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserStateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_STATE_BEAN\" (" + //
                "\"USER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: userId
                "\"USER_NICK_NAME\" TEXT," + // 1: userNickName
                "\"USER_SEX\" TEXT," + // 2: userSex
                "\"USER_SESSION\" TEXT," + // 3: userSession
                "\"USER_LAST_MESSAGE_ID\" TEXT);"); // 4: userLastMessageId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_STATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserStateBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(2, userNickName);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String userSession = entity.getUserSession();
        if (userSession != null) {
            stmt.bindString(4, userSession);
        }
 
        String userLastMessageId = entity.getUserLastMessageId();
        if (userLastMessageId != null) {
            stmt.bindString(5, userLastMessageId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserStateBean entity) {
        stmt.clearBindings();
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(1, userId);
        }
 
        String userNickName = entity.getUserNickName();
        if (userNickName != null) {
            stmt.bindString(2, userNickName);
        }
 
        String userSex = entity.getUserSex();
        if (userSex != null) {
            stmt.bindString(3, userSex);
        }
 
        String userSession = entity.getUserSession();
        if (userSession != null) {
            stmt.bindString(4, userSession);
        }
 
        String userLastMessageId = entity.getUserLastMessageId();
        if (userLastMessageId != null) {
            stmt.bindString(5, userLastMessageId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserStateBean readEntity(Cursor cursor, int offset) {
        UserStateBean entity = new UserStateBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // userId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userNickName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userSex
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // userSession
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // userLastMessageId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserStateBean entity, int offset) {
        entity.setUserId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setUserNickName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserSex(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUserSession(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserLastMessageId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserStateBean entity, long rowId) {
        return entity.getUserId();
    }
    
    @Override
    public String getKey(UserStateBean entity) {
        if(entity != null) {
            return entity.getUserId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserStateBean entity) {
        return entity.getUserId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
